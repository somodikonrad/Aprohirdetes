import express, { Request, Response, NextFunction, Router } from "express";
import { AppDataSource } from "../data-source";
import { Advertisements } from "../entity/Advertisements";
import { User } from "../entity/User";
import multer from 'multer';
import { tokencheck } from "../utils/tokenUtils";
import cron from "node-cron";
import { Category } from "../entity/Category";
import path from "path";

const app = express();



// ----------------------------Multer(K√©pfelt√∂lt√©s)----------------------------

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');  // Make sure 'uploads/' directory exists
  },
  filename: function (req, file, cb) {
    const timestamp = Date.now();
    const originalname = file.originalname.replace(' ', '_');
    const name = originalname.substring(0, originalname.lastIndexOf('.'));
    const ext = originalname.substring(originalname.lastIndexOf('.'));
    cb(null, name + '-' + timestamp + ext);
  }
});

const upload = multer({ storage: storage });

const router = Router();
app.use(express.json()); // Biztos√≠tja a JSON-k√©nt √©rkez≈ë k√©r√©s feldolgoz√°s√°t

// 1 h√©t ut√°ni t√∂rl≈ë f√ºggv√©ny
export const deleteExpiredAds = async () => {
  const adRepository = AppDataSource.getRepository(Advertisements);

  // Hat√°rid≈ë kisz√°m√≠t√°sa: 7 nappal ezel≈ëtti d√°tum
  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

  try {
    // Hirdet√©sek t√∂rl√©se egy SQL lek√©rdez√©ssel
    const result = await adRepository
      .createQueryBuilder()
      .delete()
      .from(Advertisements)
      .where("date < :oneWeekAgo", { oneWeekAgo })
      .execute();

    if (result.affected && result.affected > 0) {
      console.log(`üóëÔ∏è ${result.affected} lej√°rt hirdet√©s t√∂r√∂lve!`);
    } else {
      console.log("‚úÖ Nincs lej√°rt hirdet√©s.");
    }
  } catch (error) {
    console.error("‚ùå Hiba a lej√°rt hirdet√©sek t√∂rl√©se sor√°n:", error);
  }
};

// ----------------------------Hirdet√©s m≈±veletek----------------------------
// Hirdet√©s l√©trehoz√°sa
router.post("/", upload.single('image'), async (req: any, res: any) => {
  const invalidFields: string[] = [];
  console.log(req.body);

  const { categoryID, title, description, price, image } = req.body;

  // Ellen≈ërizz√ºk az √∂sszes mez≈ët
  console.log("K√ºld√∂tt adatok:", { categoryID, title, description, price, image });
  
  // Ha vannak hib√°s mez≈ëk
  if (invalidFields.length > 0) {
    return res.status(400).json({
      message: "K√©rem, t√∂ltse ki az √∂sszes mez≈ët!",
      invalidFields,
    });
  }

  // Ellen≈ërizd, hogy a felhaszn√°l√≥ l√©tezik-e
  const user = await AppDataSource.getRepository(User).findOne({
    where: { id: req.user?.userId },
  });
  if (!user) {
    return res.status(404).json({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥!" });
  }

  // Ellen≈ërizd, hogy a kateg√≥ria l√©tezik-e
  const category = await AppDataSource.getRepository(Category).findOne({
    where: { id: categoryID },
  });
  if (!category) {
    return res.status(404).json({ message: "Kateg√≥ria nem tal√°lhat√≥!" });
  }

  const newAd = new Advertisements();
  newAd.user = user;
  newAd.date = new Date();
  newAd.category = category;
  newAd.title = title;
  newAd.description = description;
  newAd.price = price;
  newAd.imagefilename = req.file.filename;

  try {
    await AppDataSource.getRepository(Advertisements).save(newAd);
    res.status(201).json({ message: "Hirdet√©s sikeresen l√©trehozva!", advertisement: newAd });
  } catch (error) {
    console.error("Hiba a hirdet√©s ment√©se sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©s ment√©sekor.", error });
  }
});


// Hirdet√©s m√≥dos√≠t√°sa (Csak a saj√°t hirdet√©st m√≥dos√≠thatja)
// Hirdet√©s m√≥dos√≠t√°sa (Csak a saj√°t hirdet√©st m√≥dos√≠thatja)
router.patch("/:id", tokencheck, upload.single('image'), async (req: any, res: any) => {
  console.log("Request Params:", req.params);  // Az id ellen≈ërz√©se
  console.log("Request Body:", req.body);      // A m√≥dos√≠tott mez≈ëk

  try {
    const { id } = req.params;  // Kivessz√ºk az id-t a param√©terekb≈ël
    const { categoryID, title, description, price } = req.body;  // A body-ban kapott mez≈ëk
    const image = req.file ? req.file.filename : undefined; // Ha van √∫j f√°jl, akkor az el√©r√©si √∫tja

    console.log("Querying with ID:", id);  // Id logol√°sa a lek√©rdez√©s el≈ëtt

    // Lek√©rdezz√ºk a hirdet√©st az adatb√°zisb√≥l az ID alapj√°n
    const adRepository = AppDataSource.getRepository(Advertisements);
    const ad = await adRepository.findOne({ where: { id }, relations: ["user", "category"] });

    if (!ad) {
      console.log("Hirdet√©s nem tal√°lhat√≥!");
      return res.status(404).json({ message: "Hirdet√©s nem tal√°lhat√≥!" });
    }

    console.log("Found Ad:", ad);  // Ellen≈ërizz√ºk, hogy tal√°ltunk adatot

    // Csak akkor engedj√ºk m√≥dos√≠tani, ha a felhaszn√°l√≥ jogosult r√°
    if (ad.user.id !== req.user.id) {
      return res.status(403).json({ message: "Nincs jogosults√°god ezt a hirdet√©st m√≥dos√≠tani!" });
    }

    // Ha van m√≥dos√≠tott mez≈ë, friss√≠tj√ºk azt
    if (categoryID !== undefined) {
      // Ha nincs kateg√≥ria, akkor √∫j kateg√≥ri√°t rendel√ºnk hozz√°
      const categoryRepository = AppDataSource.getRepository(Category);
      const category = await categoryRepository.findOne({ where: { id: categoryID } });

      if (!category) {
        return res.status(404).json({ message: "Kateg√≥ria nem tal√°lhat√≥!" });
      }

      ad.category = category;  // Friss√≠tj√ºk a kateg√≥ri√°t
    }

    if (title !== undefined) ad.title = title;
    if (description !== undefined) ad.description = description;
    if (price !== undefined) ad.price = price;
    if (image !== undefined) ad.imagefilename = image; // √öj k√©p f√°jl el√©r√©si √∫tja

    // Az adatok ment√©se az adatb√°zisba
    await adRepository.save(ad);

    res.status(200).json({ message: "Hirdet√©s sikeresen m√≥dos√≠tva!", advertisement: ad });

  } catch (error) {
    console.error("Hiba a hirdet√©s m√≥dos√≠t√°sa sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©s m√≥dos√≠t√°sakor.", error });
  }
});


// Hirdet√©s t√∂rl√©se (Csak a saj√°t hirdet√©s√©t t√∂r√∂lheti)
router.delete("/:id", tokencheck, async (req: any, res: any) => {
  try {
    const { id } = req.params;

    const adRepository = AppDataSource.getRepository(Advertisements);
    const ad = await adRepository.findOne({ where: { id }, relations: ["user"] });

    if (!ad) {
      return res.status(404).json({ message: "Hirdet√©s nem tal√°lhat√≥!" });
    }

    if (ad.user.id !== req.user.id) {
      return res.status(403).json({ message: "Nincs jogosults√°god ezt a hirdet√©st t√∂r√∂lni!" });
    }

    await adRepository.remove(ad);

    res.status(200).json({ message: "Hirdet√©s sikeresen t√∂r√∂lve‚úÖ!" });

  } catch (error) {
    console.error("Hiba a hirdet√©s t√∂rl√©se sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©s t√∂rl√©sekor.", error });
  }
});

// Hirdet√©sek lek√©r√©se (Mindenki sz√°m√°ra el√©rhet≈ë)
router.get("/", tokencheck, async (_req: Request, res: Response) => {
  try {
    // Lek√©rj√ºk a hirdet√©seket, √©s a kapcsol√≥d√≥ felhaszn√°l√≥ adatokat is
    const ads = await AppDataSource.getRepository(Advertisements)
      .createQueryBuilder("ad")
      .leftJoinAndSelect("ad.user", "user")  // Felhaszn√°l√≥ adatainak lek√©r√©se
      .leftJoinAndSelect("ad.category", "category")  // Kateg√≥ria adatainak lek√©r√©se
      .getMany();

    // V√°lasz visszak√ºld√©se a felhaszn√°l√≥ nev√©vel √©s ID-j√°val
    res.status(200).json({
      advertisements: ads.map(ad => ({
        id: ad.id,
        title: ad.title,
        price: ad.price,
        description: ad.description,
        category: { 
          id: ad.category.id, // Kateg√≥ria ID
          name: ad.category.name, // Kateg√≥ria n√©v
          color: ad.category.color // Kateg√≥ria sz√≠n (ha sz√ºks√©ges)
        },  // Kateg√≥ria neve
        imageUrl: ad.imagefilename,  // K√©p URL-je
        user: {
          id: ad.user.id,           // Felhaszn√°l√≥ ID-ja
          name: ad.user.name,       // Felhaszn√°l√≥ neve
        }

      })),
    });
  } catch (error) {
    console.error("Hiba a hirdet√©sek lek√©r√©se sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©sek lek√©r√©sekor.", error });
  }
});

// Hirdet√©sek lek√©r√©se ID szerint
router.get("/:id", tokencheck, async (req: any, res: any) => {
  try {
    const adId = req.params.id;
    const ad = await AppDataSource.getRepository(Advertisements)
      .createQueryBuilder("ad")
      .leftJoinAndSelect("ad.user", "user")
      .leftJoinAndSelect("ad.category", "category")  // Kateg√≥ria √∂sszekapcsol√°sa
      .where("ad.id = :id", { id: adId })
      .getOne();
    
    if (!ad) {
      return res.status(404).json({ message: "Hirdet√©s nem tal√°lhat√≥" });
    }
    
    // Kateg√≥ria r√©szleteinek visszak√ºld√©se
    res.status(200).json({
      id: ad.id,
      title: ad.title,
      price: ad.price,
      description: ad.description,
      category: { 
        id: ad.category.id, // Kateg√≥ria ID
        name: ad.category.name, // Kateg√≥ria n√©v
        color: ad.category.color // Kateg√≥ria sz√≠n (ha sz√ºks√©ges)
      },
      imageUrl: ad.imagefilename,
      user: {
        id: ad.user.id,
        name: ad.user.name,
        email: ad.user.email,
        address: ad.user.address
      }
    });
  } catch (error) {
    console.error("Hiba a hirdet√©s lek√©r√©se sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©s lek√©r√©sekor.", error });
  }
});



// Hirdet√©sek lek√©r√©se adott kateg√≥ri√°ban
router.get("/category/:categoryName", async (req: any, res: any) => {
  try {
    const { categoryName } = req.params;

    // El≈ësz√∂r keresd meg a kateg√≥ri√°t a neve alapj√°n
    const category = await AppDataSource.getRepository(Category)
      .createQueryBuilder("category")
      .where("category.name = :categoryName", { categoryName })
      .getOne();

    // Ha nem tal√°lhat√≥ a kateg√≥ria
    if (!category) {
      return res.status(404).json({ message: `Nincs ilyen kateg√≥ria: ${categoryName}` });
    }

    // Keress√ºk meg az √∂sszes hirdet√©st a kateg√≥ri√°hoz
    const ads = await AppDataSource.getRepository(Advertisements)
      .createQueryBuilder("ad")
      .where("ad.categoryId = :categoryId", { categoryId: category.id })
      .getMany();

    // Ha nincsenek hirdet√©sek ebben a kateg√≥ri√°ban
    if (ads.length === 0) {
      return res.status(404).json({ message: `Nincsenek hirdet√©sek ebben a kateg√≥ri√°ban: ${categoryName}` });
    }

    // Kateg√≥ria n√©v √©s a hozz√° tartoz√≥ hirdet√©sek visszak√ºld√©se
    res.status(200).json({
      category: category.name,
      advertisements: ads
    });

  } catch (error) {
    console.error("‚ùå Hiba a kateg√≥ria szerinti sz≈±r√©s sor√°n:", error);
    res.status(500).json({ message: "Hiba t√∂rt√©nt a hirdet√©sek lek√©r√©sekor.", error });
  }
});

// K√©pfelt√∂lt√©s (bejelentkezett felhaszn√°l√≥knak)


// Hirdet√©s autodelete 1 h√©t ut√°n
cron.schedule("* * * * *", async () => { // Naponta √©jf√©lkor fut
  console.log("üîÑ Hirdet√©sek ellen≈ërz√©se...");

  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

  try {
    const adRepository = AppDataSource.getRepository(Advertisements);

    const oldAds = await adRepository
      .createQueryBuilder("ad")
      .where("ad.date < :oneWeekAgo", { oneWeekAgo })
      .getMany();

    if (oldAds.length > 0) {
      await adRepository.remove(oldAds);
      console.log(`‚úÖ ${oldAds.length} r√©gi hirdet√©s t√∂r√∂lve.`);
    } else {
      console.log("‚ÑπÔ∏è Nincsenek lej√°rt hirdet√©sek.");
    }
  } catch (error) {
    console.error("‚ùå Hiba a lej√°rt hirdet√©sek t√∂rl√©se sor√°n:", error);
  }
});


export default router;
