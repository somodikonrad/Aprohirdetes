import { AppDataSource } from "../data-source";
import { Category } from "../entity/Category";
 
// üîπ Kateg√≥ri√°k seedel√©se (hozz√°ad√°s + t√∂rl√©s)
async function seedDatabase() {
    try {
      const categoryRepository = AppDataSource.getRepository(Category);
 
      // üîπ Az aktu√°lisan k√≠v√°nt kateg√≥ri√°k list√°ja
      const categories = [
        { name: "Ingatlan" },
        { name: "G√©pj√°rm≈±" },
        { name: "H√°ztart√°si g√©p" },
        { name: "J√°t√©k" },
        { name: "Ruh√°zat" },
        { name: "Elektronika" },
        { name: "Szolg√°ltat√°s" },
        { name: "Sport √©s szabadid≈ë" },
        { name: "√Ållat" },
        { name: "Egy√©b" }, 
        
      ];

      // üîπ Megn√©zz√ºk, mi van jelenleg az adatb√°zisban
      const existingCategories = await categoryRepository.find();

      // üîπ T√∂r√∂lj√ºk azokat a kateg√≥ri√°kat, amelyek nincsenek a list√°ban
      for (const existingCategory of existingCategories) {
        if (!categories.some(c => c.name === existingCategory.name)) {
          await categoryRepository.remove(existingCategory);
          console.log(`üóëÔ∏è T√∂r√∂lve: "${existingCategory.name}"`);
        }
      }

      // üîπ √öj kateg√≥ri√°k hozz√°ad√°sa
      for (const newCategory of categories) {
        const existingCategory = await categoryRepository.findOne({ where: { name: newCategory.name } });
        if (!existingCategory) {
          await categoryRepository.save(newCategory);
          console.log(`‚úÖ Hozz√°adva: "${newCategory.name}"`);
        } else {
          console.log(`‚ö†Ô∏è M√°r l√©tezik: "${newCategory.name}", kihagyva.`);
        }
      }

    } catch (error) {
      console.error("‚ùå Hiba t√∂rt√©nt a seedel√©s sor√°n:", error);
    }
}
 
export { seedDatabase };
